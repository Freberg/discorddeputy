package com.freberg.discorddeputy.command;import java.util.List;import java.util.Optional;import com.freberg.discorddeputy.api.EpicGamesOfferClient;import com.freberg.discorddeputy.message.epic.EpicGamesOffer;import com.freberg.discorddeputy.reponse.DiscordResponseUtil;import discord4j.core.object.entity.Message;import joptsimple.OptionParser;import joptsimple.OptionSet;import lombok.RequiredArgsConstructor;import reactor.core.publisher.Flux;import reactor.core.publisher.Mono;@RequiredArgsConstructorpublic class ListOffersCommand implements Command {    private static final String LIST_OFFERS_COMMAND = "!offers";    private static final String ARG_END_POINT = "e";    private static final String ARG_TYPE = "t";    private static final String END_POINT_EPIC_GAMES = "epicGames";    private static final String OPTION_CURRENT = "current";    private static final String OPTION_UPCOMING = "upcoming";    private static final OptionParser PARSER = new OptionParser(ARG_END_POINT + "::" + ARG_TYPE + "::");    private final EpicGamesOfferClient epicGamesOfferClient;    @Override    public String getCommand() {        return LIST_OFFERS_COMMAND;    }    @Override    public String getDescription() {        return "list offers from different end points\n";    }    @Override    public String getHelp() {        return "[-e] {epicGames} (Required)\n" +               "[-t] {current, upcoming} (Default is current)";    }    @Override    public void accept(Message message) {        OptionSet options = PARSER.parse(message.getContent().split(" "));        String endPoint = getArgument(options, ARG_END_POINT);        String type = getArgument(options, ARG_TYPE);        if (endPoint == null) {            sendHelpReponse(message);            return;        }        switch (endPoint) {            case END_POINT_EPIC_GAMES:                Mono<List<EpicGamesOffer>> offers = OPTION_CURRENT.equals(type) ?                        epicGamesOfferClient.getCurrentOffers() : epicGamesOfferClient.getUpcomingOffers();                offers.flatMapMany(Flux::fromIterable)                      .flatMap(offer -> message.getChannel().flatMap(channel -> channel.createEmbed(spec ->                              DiscordResponseUtil.createEpicGamesOfferMessage(offer, spec, true))))                      .subscribe();                break;            default:                sendHelpReponse(message);                break;        }    }    private String getArgument(OptionSet options, String arg) {        return Optional.of(arg)                       .filter(options::hasArgument)                       .map(options::valueOf)                       .map(String.class::cast)                       .orElse(null);    }}